---
title: Using Crunchy PostgreSQL for PCF
owner: Crunchy Data 
---

This topic describes how to use Crunchy PostgreSQL for Pivotal Cloud Foundry (PCF).

##<a id='using'></a> Crunchy PostgreSQL Services and Plans

Crunchy PostgreSQL comes with two services:

* postgresql-9.5
* postgis-9.5

###<a id='using-pgsql-95'></a> PostgreSQL 9.5 Service

The `postgresql-9.5` service comes with two plans:

* small-25
* large-50

The `small-25` plan includes the following:

* PostgreSQL 9.5
* Automated Backups
* Load Balanced Read Replicas
* Maximum Connections: 25

The `large-50` plan includes the following:

* PostgreSQL 9.5
* Automated Backups
* Load Balanced Read Replicas
* Maximum Connections: 50

###<a id='using-pgsql-95'></a> PostGIS 9.5 Service

The `postgis-9.5` service comes with two plans:

* small-25
* large-50

The `small-25` plan includes the following:

* PostgreSQL 9.5
* PostGIS 2.2
* Tiger Geocoder Extension
* Automated Backups
* Load Balanced Read Replicas
* Maximum Connections: 20

The `large-50` plan includes the following:

* PostgreSQL 9.5
* PostGIS 2.2
* Tiger Geocoder Extension
* Automated Backups
* Load Balanced Read Replicas
* Maximum Connections: 50

####<a id='using-pgsql-95'></a> Create PostgreSQL 9.5 Service

Creating a service requires four parameters with the create-service request:

  * `db_name` is the database name being requested.
  * `db_username` is the username being requested.
  * `owner_name` is meta information about the owner of this database.
  * `owner_email` is the email where the owner can be contacted.

Follow the steps below to create and bind a service instance of Crunchy PostgreSQL to use with your app.

1. Create a service instance using the following command as a template:

    <pre class="terminal">
    cf create-service postgresql-9.5 small-25 my_pgsql -c '
    {
        "db_name": "crunchydb",
        "db_username": "crunchy",
        "owner_name": "Crunchy Data",
        "owner_email": "admin@crunchydata.com"
    }'
    </pre>

1. Bind the service instance to your application:

    <pre class="terminal">
    cf bind-service APP_NAME SERVICE_INSTANCE_NAME
    </pre>

1. Run the following command to restage your app so that it can use the service:
    <pre class="terminal">
    cf bind-service <APP_NAME> <SERVICE_NAME>
    cf restage <APP_NAME>
    </pre>

##<a id='diaster'></a> Backups

Crunchy PostgreSQL uses `pgBackrest` for physical backups of the database.  Backups are taken
every night at 1 am, 7 days a week.  Monday through Saturday will take incremental backups, Sunday
will create a new full backup.  

All archives from the database server are stored on the dedicated backup host.  This means 
that databases can be restored to specific points in time (point in time recovery).

Currently, individual databases cannot be restored - all databases will be restored in the shared 
cluster.

##<a id='diaster-recovery'></a> Restore Deltas

These instructions will demonstrate how the database can be restored using only deltas 
between the backup and the database.

The following requires an administrator to SSH to the `postgresql-master` server. 
For guidance on SSHing to servers in the service, see the [Pivotal documentation.]
(https://docs.pivotal.io/pivotalcf/1-8/customizing/trouble-advanced.html)

1. First, ssh into the `postgresql-master` server using the `bosh` tool:
    <pre class="terminal">
    bosh ssh postgresql-master
    </pre>

1. Switch to the root user: 
    <pre class="terminal">
    sudo -i 
    </pre>

1. Stop postgresql services:
    <pre class="terminal">
    monit stop postgresql
    </pre>

1. Switch to the `vcap` user:
    <pre class="terminal">
    su - vcap
    </pre>

1. Verify that backups are available:
    <pre class="terminal">
    pgbackrest --config=/var/vcap/store/pgbackrest/config/pgbackrest.conf \
      --stanza=main info
    </pre>

1. Restore the database:
    <pre class="terminal">
    pgbackrest --config=/var/vcap/store/pgbackrest/config/pgbackrest.conf \
      --stanza=main \
      --delta restore
    </pre>

1. Switch to root:
    <pre class="terminal">
    sudo -i
    </pre>

1. Start the database:
    <pre class="terminal">
    monit start postgesql
    </pre>

##<a id='diaster-recovery'></a> Restore Point In Time

These instructions will demonstrate how the database can be restored using a point 
in time.

The following requires an administrator to SSH to the `postgresql-master` server.
For guidance on SSHing to servers in the service, see the [Pivotal documentation.]
(https://docs.pivotal.io/pivotalcf/1-8/customizing/trouble-advanced.html)

1. First, ssh into the `postgresql-master` server using the `bosh` tool:
    <pre class="terminal">
    bosh ssh postgresql-master
    </pre>

1. Switch to the root user:
    <pre class="terminal">
    sudo -i
    </pre>

1. Stop postgresql services:
    <pre class="terminal">
    monit stop postgresql
    </pre>

1. Switch to the `vcap` user:
    <pre class="terminal">
    su - vcap
    </pre>

1. Verify that backups are available:
    <pre class="terminal">
    pgbackrest --config=/var/vcap/store/pgbackrest/config/pgbackrest.conf --stanza=main info
    </pre>

1. Restore the database:
    <pre class="terminal">
    pgbackrest --config=/var/vcap/store/pgbackrest/config/pgbackrest.conf \
        --stanza=main \
        --delta \
        --type=time "--target=2016-12-13 00:11:34.531619+00" restore
    </pre>

1. Switch to root:
    <pre class="terminal">
    sudo -i
    </pre>

1. Start the database:
    <pre class="terminal">
    monit start postgesql
    </pre>

##<a id='diaster-recovery'></a> pgBackrest Additoinal Information

For more information regarding pgBackrest restorations, check out the [official documentation.](www.pgbackrest.org/user-guide.html)
